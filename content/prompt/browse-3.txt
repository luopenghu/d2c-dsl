第一步： 查看类型定义： https://raw.githubusercontent.com/l5oo00/d2c-dsl/main/dsl.ts ， 注意：
    1. 这是一个 typescript 文件， 最终导出了 `Node` 类型，请同时仔细阅读 ts 里面的注释，里面包含了对代码的解释说明
    2. 完成查看后， 不要解释任何类型定义的内容， 你只需要输出“我已了解 `Node` 类型定义”即可，然后继续下一步
第二步： 查看具体的 UI 界面描述： https://raw.githubusercontent.com/l5oo00/d2c-dsl/main/ui.txt ，注意：
    1. 完成查看后， 你只需要输出“我已了解 UI 界面描述”即可，无需再输出任何其他解释，然后继续下一步
第三步： 输出符合第二步里 UI 界面描述的 mock 数据， 要求如下：
    1. 以 JSON 格式输出一个代码块，不要添加注释，也不要有额外的解释， 里面的字段名使用英文， 字段值尽量合理使用中文
    2. 字段值如果表示一个连接， 那尽可能的让它看起来像个链接
    3. 如果数据是数组， 那数组长度不能小于 5， 不能大于 10
    4. 仅输出 JSON 数据即可， 不要输出其他内容，也不用输出注释。
第四步： 输出一个符合第一步里定义的 `Node` 类型的 JSON 代码块， 要求如下：
    1. JSON 内容能用来表示第二步里描述的 UI 界面， 不要添加注释，也不要有额外的解释
    2. JSON 内容需要严格符合第一步里定义的 `Node` 类型。JSON 里的所有属性值， 如果是数字， 请转为数字形式的字符串； 所有 `children` 字段如果不是数组， 请将它转为数组
    3. JSON 内容里需要绑定上面第二步里生成的 mock 数据， 格式为 '${字段名}' ， 其中字段名支持多级，mock 数据整体本身命名固定为 `data`，比如， `style` 下的 `color` 属性值需要绑定数据里的 `x` 字段， 则 DSL 里的对应 `color` 属性的描述为 `color: '${data.x}'`。
    4. 对于数组数据， 对应的 JSON 节点需要使用 `condition.mfor` 来进行循环
    5. 你会根据 UI 界面描述的样式， 在 JSON 内容里使用合适的布局标签（优先使用 `flex`）， 同时在各个标签的 `style` 字段里填充上一些你认为合理的，且符合类型定义里的 style 字段里声明的样式属性和对应的值

最后一定注意， 不要输出任何不在以上步骤里要求的其他内容！！！
最后一定注意， 不要输出任何不在以上步骤里要求的其他内容！！！
最后一定注意， 不要输出任何不在以上步骤里要求的其他内容！！！
